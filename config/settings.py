"""
AI Overview Optimization Projesi - Temel Ayarlar
Google Cloud ve Vertex AI konfig√ºrasyon parametreleri
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# .env dosyasƒ±nƒ± y√ºkle (varsa)
load_dotenv()

# Proje Temel Ayarlarƒ±
PROJECT_ROOT = Path(__file__).parent.parent
DATA_DIR = PROJECT_ROOT / "data"
RAW_DATA_DIR = DATA_DIR / "raw" 
PROCESSED_DATA_DIR = DATA_DIR / "processed"
BATCHES_DIR = DATA_DIR / "batches"
LOGS_DIR = PROJECT_ROOT / "logs"

# Dizinleri olu≈ütur
for directory in [DATA_DIR, RAW_DATA_DIR, PROCESSED_DATA_DIR, BATCHES_DIR, LOGS_DIR]:
    directory.mkdir(exist_ok=True)

# Google Cloud Ayarlarƒ±
GCP_PROJECT_ID = os.getenv('GCP_PROJECT_ID', 'your-project-id')
GCP_REGION = os.getenv('GCP_REGION', 'us-central1')
GCP_ZONE = os.getenv('GCP_ZONE', 'us-central1-a')

# Google Cloud Kimlik Doƒürulama
GOOGLE_APPLICATION_CREDENTIALS = os.getenv('GOOGLE_APPLICATION_CREDENTIALS', None)

# Cloud Storage Ayarlarƒ±
STORAGE_BUCKET_NAME = f"{GCP_PROJECT_ID}-ai-overview-data"
STORAGE_BATCH_PREFIX = "website-batches"

# Vertex AI Search Ayarlarƒ±
SEARCH_ENGINE_ID = os.getenv('SEARCH_ENGINE_ID', '')
DISCOVERY_ENGINE_PROJECT = GCP_PROJECT_ID
DISCOVERY_ENGINE_LOCATION = os.getenv('DISCOVERY_ENGINE_LOCATION', 'global')

# Data Store Ayarlarƒ±  
DATA_STORE_DISPLAY_NAME = "AI Overview Website Data"
DATA_STORE_CONTENT_CONFIG = "CONTENT_REQUIRED"
DATA_STORE_SOLUTION_TYPE = "SOLUTION_TYPE_SEARCH"

# Search Engine Ayarlarƒ±
SEARCH_ENGINE_DISPLAY_NAME = "AI Overview Search Engine"
SEARCH_ENGINE_SOLUTION_TYPE = "SOLUTION_TYPE_SEARCH"

# Batch ƒ∞≈üleme Ayarlarƒ±
BATCH_SIZE = 50  # Vertex AI'ƒ±n √∂nerdiƒüi maksimum URL sayƒ±sƒ±
MAX_CONTENT_LENGTH = 10000  # Karakterle maksimum i√ßerik uzunluƒüu
MIN_CONTENT_LENGTH = 100    # Minimum i√ßerik uzunluƒüu

# Web Scraping Ayarlarƒ±
USER_AGENT = os.getenv('USER_AGENT', 'AI-Overview-Bot/1.0')
REQUEST_DELAY = 1.0  # Saniye cinsinden istek arasƒ± gecikme
REQUEST_TIMEOUT = 30  # Saniye cinsinden timeout
MAX_RETRIES = 3

# URL Ke≈üif Ayarlarƒ±
INCLUDE_PATTERNS = [
    r'.*',  # T√ºm URL'leri dahil et
]

EXCLUDE_PATTERNS = [
    r'.*\.(pdf|doc|docx|xls|xlsx|ppt|pptx)$',  # Ofis dosyalarƒ±
    r'.*\.(jpg|jpeg|png|gif|svg|ico)$',        # Resim dosyalarƒ±
    r'.*\.(zip|rar|tar|gz)$',                  # Ar≈üiv dosyalarƒ±
    r'.*\.(mp3|mp4|avi|mov|wmv)$',            # Medya dosyalarƒ±
    r'.*/admin/.*',                            # Admin sayfalarƒ±
    r'.*/wp-admin/.*',                         # WordPress admin
    r'.*/login.*',                             # Login sayfalarƒ±
    r'.*/register.*',                          # Kayƒ±t sayfalarƒ±
    r'.*\?.*print.*',                          # Print versiyonlarƒ±
    r'.*#.*',                                  # Anchor linkler
]

# Loglama Ayarlarƒ±
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

# AI Overview Analiz Ayarlarƒ±
COSINE_SIMILARITY_THRESHOLD = float(os.getenv('COSINE_SIMILARITY_THRESHOLD', '0.75'))
AI_OVERVIEW_SCORE_WEIGHTS = {
    'content_quality': 0.4,
    'keyword_relevance': 0.6
}

# Content Quality Fakt√∂rleri
CONTENT_QUALITY_FACTORS = {
    'title_weight': 0.3,
    'content_length_weight': 0.3,
    'relevance_score_weight': 0.4
}

# TF-IDF Ayarlarƒ±
TFIDF_MAX_FEATURES = 100
TFIDF_STOP_WORDS = 'english'

# Sentence Transformer Ayarlarƒ±
SENTENCE_TRANSFORMER_MODEL = 'all-MiniLM-L6-v2'

# API Timeout Ayarlarƒ±
VERTEX_AI_TIMEOUT = 1800  # 30 dakika
CLOUD_STORAGE_TIMEOUT = 600  # 10 dakika
SEARCH_TIMEOUT = 60  # 1 dakika

# Optimizasyon √ñnerileri Template'leri
OPTIMIZATION_SUGGESTIONS = [
    "H1-H6 ba≈ülƒ±k yapƒ±sƒ±nƒ± iyile≈ütirin",
    "FAQ b√∂l√ºmleri ekleyin",
    "Listeleme formatƒ±nƒ± kullanƒ±n", 
    "Doƒürudan cevap veren paragraflar yazƒ±n",
    "ƒ∞statistikler ve veri noktalarƒ± ekleyin",
    "Schema.org structured data ekleyin",
    "Meta description'larƒ± optimize edin",
    "ƒ∞√ß linkleme stratejisini geli≈ütirin",
    "Sayfa y√ºkleme hƒ±zƒ±nƒ± artƒ±rƒ±n",
    "Mobil uyumluluƒüu iyile≈ütirin"
]

# Content Analysis Thresholds
AI_OVERVIEW_SCORE_THRESHOLDS = {
    'excellent': 0.8,
    'good': 0.6,
    'average': 0.4,
    'poor': 0.2
}

# File Extensions
SUPPORTED_CONTENT_TYPES = [
    'text/html',
    'application/xhtml+xml',
    'text/plain'
]

# Export Formats
EXPORT_FORMATS = {
    'json': 'application/json',
    'csv': 'text/csv', 
    'txt': 'text/plain',
    'html': 'text/html'
}

# Cloud SQL Ayarlarƒ± (Opsiyonel)
DB_PASSWORD = os.getenv('DB_PASSWORD', '')
DB_NAME = f"{GCP_PROJECT_ID}-ai-overview"
DB_USER = "postgres"
DB_PORT = 5432

# Feature Flags
ENABLE_AI_OVERVIEW_TRACKING = os.getenv('ENABLE_AI_OVERVIEW_TRACKING', 'true').lower() == 'true'
ENABLE_DETAILED_LOGGING = os.getenv('ENABLE_DETAILED_LOGGING', 'false').lower() == 'true'
ENABLE_CACHE = os.getenv('ENABLE_CACHE', 'true').lower() == 'true'

# Cache Ayarlarƒ±
CACHE_TTL = 3600  # 1 saat
CACHE_MAX_SIZE = 1000  # Maksimum cache entry sayƒ±sƒ±

# Rate Limiting
RATE_LIMIT_REQUESTS = 100  # 1 dakikada maksimum istek sayƒ±sƒ±
RATE_LIMIT_WINDOW = 60     # Saniye cinsinden window

# Debug Ayarlarƒ±
DEBUG_MODE = os.getenv('DEBUG_MODE', 'false').lower() == 'true'
VERBOSE_OUTPUT = os.getenv('VERBOSE_OUTPUT', 'false').lower() == 'true'

# Testing Ayarlarƒ±
TEST_DATA_DIR = PROJECT_ROOT / "tests" / "data"
TEST_OUTPUT_DIR = PROJECT_ROOT / "tests" / "output"

# Test i√ßin dizinleri olu≈ütur
for directory in [TEST_DATA_DIR, TEST_OUTPUT_DIR]:
    directory.mkdir(parents=True, exist_ok=True)

# Validation Rules
URL_VALIDATION_RULES = {
    'max_url_length': 2048,
    'min_content_words': 10,
    'max_content_words': 10000,
    'required_html_tags': ['title', 'body']
}

# Performance Monitoring
PERFORMANCE_METRICS = {
    'track_extraction_time': True,
    'track_processing_time': True,
    'track_upload_time': True,
    'track_search_time': True
}

# Error Handling
ERROR_HANDLING = {
    'max_consecutive_errors': 10,
    'error_cooldown_seconds': 60,
    'retry_exponential_backoff': True
}

# Notification Settings (Opsiyonel)
NOTIFICATION_SETTINGS = {
    'email_notifications': os.getenv('EMAIL_NOTIFICATIONS', 'false').lower() == 'true',
    'slack_webhook': os.getenv('SLACK_WEBHOOK_URL', ''),
    'discord_webhook': os.getenv('DISCORD_WEBHOOK_URL', '')
}

# Report Generation
REPORT_SETTINGS = {
    'auto_generate_reports': True,
    'report_format': 'both',  # 'json', 'txt', 'both'
    'include_raw_data': False,
    'include_statistics': True
}

# Security Settings
SECURITY_SETTINGS = {
    'validate_ssl': True,
    'follow_redirects': True,
    'max_redirects': 5,
    'respect_robots_txt': True
}

print(f"üìã Ayarlar y√ºklendi - Proje ID: {GCP_PROJECT_ID}")
if DEBUG_MODE:
    print(f"üêõ Debug modu aktif")
if VERBOSE_OUTPUT:
    print(f"üì¢ Verbose output aktif") 